{
  "Material App": {
    "scope": "flutter, dart",
    "prefix": "mateapp",
    "description": "Creates a MaterialApp widget, a base application structure using Material Design components.",
    "body": [
      "import 'dart:async';\n",
      "import 'package:flutter/material.dart';\n",
      "void main() => runZonedGuarded<void>(",
      "      () => runApp(const App()),",
      "      (error, stackTrace) => print('Top level exception: \\$error\\n\\$stackTrace'), // ignore: avoid_print",
      "    );\n",
      "/// {@template app}",
      "/// App widget.",
      "/// {@endtemplate}",
      "class App extends StatelessWidget {",
      "  /// {@macro app}",
      "  const App({super.key});\n",
      "  @override",
      "  Widget build(BuildContext context) => MaterialApp(",
      "        title: 'Material App',",
      "        home: Scaffold(",
      "          appBar: AppBar(",
      "            title: const Text('Material App Bar'),",
      "          ),",
      "          body: const SafeArea(",
      "            child: Center(",
      "              child: Text('Hello World'),",
      "            ),",
      "          ),",
      "        ),",
      "      );",
      "}\n"
    ]
  },
  "Cupertino App": {
    "scope": "flutter, dart",
    "prefix": "cupeapp",
    "description": "Creates a CupertinoApp widget, a base application structure using Cupertino (iOS-style) design components.",
    "body": [
      "import 'dart:async';\n",
      "import 'package:flutter/cupertino.dart';\n\n",
      "void main() => runZonedGuarded<void>(",
      "      () => runApp(const App()),",
      "      (error, stackTrace) => print('Top level exception: \\$error\\n\\$stackTrace'), // ignore: avoid_print",
      "    );\n",
      "/// {@template app}",
      "/// App widget.",
      "/// {@endtemplate}",
      "class App extends StatelessWidget {",
      "  /// {@macro app}",
      "  const App({super.key});\n",
      "  @override",
      "  Widget build(BuildContext context) => const CupertinoApp(",
      "        title: 'Cupertino App',",
      "        home: CupertinoPageScaffold(",
      "          navigationBar: CupertinoNavigationBar(",
      "            middle: Text('Cupertino App Bar'),",
      "          ),",
      "          child: SafeArea(",
      "            child: Center(",
      "              child: Text('Hello World'),",
      "            ),",
      "          ),",
      "        ),",
      "      );",
      "}\n"
    ]
  },
  "Scaffold": {
    "scope": "flutter, dart",
    "prefix": "scaffold",
    "description": "Creates a Scaffold widget, the basic structure for Material Design visual layout.",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: const Text('Title'),",
      "  ),",
      "  body: SafeArea(",
      "    child: Center(",
      "      child: Placeholder(),",
      "    ),",
      "  ),",
      ");"
    ]
  },
  "Stateless Widget": {
    "scope": "flutter, dart",
    "prefix": [
      "stl",
      "statelessWidget"
    ],
    "description": "Generates a new StatelessWidget class.",
    "body": [
      "import 'package:flutter/widgets.dart';\n\n",
      "/// {@template ${2:$TM_FILENAME_BASE}}",
      "/// ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}} widget.",
      "/// {@endtemplate}",
      "class $1 extends StatelessWidget {",
      "  /// {@macro $2}",
      "  const $1({",
      "    super.key, // ignore: unused_element",
      "  });",
      "  ",
      "  @override",
      "  Widget build(BuildContext context) =>",
      "    const Placeholder();${0}",
      "}\n"
    ]
  },
  "Stateless Widget with child": {
    "scope": "flutter, dart",
    "prefix": [
      "stlChild",
      "statelessWidgetWithChild"
    ],
    "description": "Generates a new StatelessWidget class with a child widget.",
    "body": [
      "import 'package:flutter/widgets.dart';\n\n",
      "/// {@template ${2:$TM_FILENAME_BASE}}",
      "/// ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}} widget.",
      "/// {@endtemplate}",
      "class $1 extends StatelessWidget {",
      "  /// {@macro $2}",
      "  const $1({",
      "    required this.child,",
      "    super.key, // ignore: unused_element",
      "  });",
      "  ",
      "  /// The widget below this widget in the tree.",
      "  final Widget child;",
      "  ",
      "  @override",
      "  Widget build(BuildContext context) =>",
      "    child;${0}",
      "}\n"
    ]
  },
  "Stateful Widget": {
    "scope": "flutter, dart",
    "prefix": [
      "stf",
      "statefulWidget"
    ],
    "description": "Generates a new StatefulWidget class.",
    "body": [
      "import 'package:flutter/widgets.dart';",
      "import 'package:meta/meta.dart';\n\n",
      "/// {@template ${2:$TM_FILENAME_BASE}}",
      "/// ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}} widget.",
      "/// {@endtemplate}",
      "class ${1} extends StatefulWidget {",
      "  /// {@macro $2}",
      "  const ${1}({",
      "    super.key, // ignore: unused_element",
      "  });",
      "  ",
      "  /// The state from the closest instance of this class",
      "  /// that encloses the given context, if any.",
      "  @internal",
      "  static _${1}State? maybeOf(BuildContext context) =>",
      "    context.findAncestorStateOfType<_${1}State>();",
      "  ",
      "  @override",
      "  State<${1}> createState() => _${1}State();",
      "}\n",
      "",
      "/// State for widget ${1}.",
      "class _${1}State extends State<${1}> {",
      "",
      "  /* #region Lifecycle */",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    // Initial state initialization",
      "  }",
      "  ",
      "  @override",
      "  void didUpdateWidget(covariant ${1} oldWidget) {",
      "    super.didUpdateWidget(oldWidget);",
      "    // Widget configuration changed",
      "  }",
      "  ",
      "  @override",
      "  void didChangeDependencies() {",
      "    super.didChangeDependencies();",
      "    // The configuration of InheritedWidgets has changed",
      "    // Also called after initState but before build",
      "  }",
      "  ",
      "  @override",
      "  void dispose() {",
      "    // Permanent removal of a tree stent",
      "    super.dispose();",
      "  }",
      "  /* #endregion */",
      "  ",
      "  @override",
      "  Widget build(BuildContext context) =>",
      "    const Placeholder();${0}",
      "}\n"
    ]
  },
  "Stateful Widget with child": {
    "scope": "flutter, dart",
    "prefix": [
      "stfChild",
      "statefulfWithChild"
    ],
    "description": "Generates a new StatefulWidget class with a child widget.",
    "body": [
      "import 'package:flutter/widgets.dart';",
      "import 'package:meta/meta.dart';\n\n",
      "/// {@template ${2:$TM_FILENAME_BASE}}",
      "/// ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}} widget.",
      "/// {@endtemplate}",
      "class ${1} extends StatefulWidget {",
      "  /// {@macro $2}",
      "  const $1({",
      "    required this.child,",
      "    super.key, // ignore: unused_element",
      "  });",
      "  ",
      "  /// The widget below this widget in the tree.",
      "  final Widget child;",
      "  ",
      "  /// The state from the closest instance of this class",
      "  /// that encloses the given context, if any.",
      "  static ${1}Controller? maybeOf(BuildContext context) =>",
      "    context.findAncestorStateOfType<_${1}State>();",
      "  ",
      "  @override",
      "  State<${1}> createState() => _${1}State();",
      "}\n",
      "",
      "/// State for widget ${1}.",
      "class _${1}State extends State<${1}> with ${1}Controller {",
      "",
      "  /* #region Lifecycle */",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    // Initial state initialization",
      "  }",
      "  ",
      "  @override",
      "  void didUpdateWidget(covariant ${1} oldWidget) {",
      "    super.didUpdateWidget(oldWidget);",
      "    // Widget configuration changed",
      "  }",
      "  ",
      "  @override",
      "  void didChangeDependencies() {",
      "    super.didChangeDependencies();",
      "    // The configuration of InheritedWidgets has changed",
      "    // Also called after initState but before build",
      "  }",
      "  ",
      "  @override",
      "  void dispose() {",
      "    // Permanent removal of a tree stent",
      "    super.dispose();",
      "  }",
      "  /* #endregion */",
      "  ",
      "  @override",
      "  Widget build(BuildContext context) =>",
      "    widget.child;",
      "}\n",
      "/// Controller for widget ${1}",
      "mixin ${1}Controller {",
      "  ${0}",
      "}\n"
    ]
  },
  "Inherited Widget": {
    "scope": "flutter, dart",
    "prefix": [
      "inh",
      "inheritedWidget"
    ],
    "description": "Generates an InheritedWidget class.",
    "body": [
      "import 'package:flutter/widgets.dart';\n\n",
      "/// {@template ${2:$TM_FILENAME_BASE}}",
      "/// ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}} widget.",
      "/// {@endtemplate}",
      "class ${1} extends InheritedWidget {",
      "  /// {@macro $2}",
      "  const ${1}({",
      "    required super.child,",
      "    super.key, // ignore: unused_element",
      "  });",
      "  ",
      "  @override",
      "  bool updateShouldNotify(covariant ${1} oldWidget) =>",
      "    false;${0}",
      "}\n"
    ]
  },
  "of": {
    "scope": "flutter, dart",
    "prefix": [
      "of",
      "maybeOf"
    ],
    "description": "Creates a static `of` method for an InheritedWidget.",
    "body": [
      "/// The state from the closest instance of this class",
      "/// that encloses the given context, if any.",
      "/// e.g. `${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}}.maybeOf(context)`.",
      "static ${1}? maybeOf(BuildContext context, {bool listen = true}) => listen",
      "  ? context.dependOnInheritedWidgetOfExactType<${1}>()?.controller",
      "  : context.getInheritedWidgetOfExactType<${1}>()?.controller",
      "",
      "static Never _notFoundInheritedWidgetOfExactType() =>",
      "  throw ArgumentError(",
      "    'Out of scope, not found inherited widget '",
      "        'a ${1} of the exact type',",
      "    'out_of_scope',",
      "  );",
      "",
      "/// The state from the closest instance of this class",
      "/// that encloses the given context.",
      "/// e.g. `${1}.of(context)`",
      "static ${1} of(BuildContext context, {bool listen = true}) =>",
      "  maybeOf(context, listen: listen) ?? _notFoundInheritedWidgetOfExactType();${0}\n"
    ]
  },
  "stateOf": {
    "scope": "flutter, dart",
    "prefix": "stateOf",
    "description": "Creates a static `stateOf` method for a State object.",
    "body": [
      "/// The state from the closest instance of this class",
      "/// that encloses the given context, if any.",
      "/// e.g. `${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}State}.maybeOf(context)`.",
      "static ${2:${1}State}? maybeOf(BuildContext context) =>",
      "  context.findAncestorStateOfType<${2}>();",
      "",
      "static Never _notFoundStateOfType() =>",
      "  throw ArgumentError(",
      "    'Out of scope, not found state of type ${2}',",
      "    'out_of_scope',",
      "  );",
      "",
      "/// The state from the closest instance of this class",
      "/// that encloses the given context.",
      "/// e.g. `${1}.of(context)`",
      "static ${2}? of(BuildContext context) =>",
      "  maybeOf(context) ?? _notFoundStateOfType();${0}\n"
    ]
  },
  "widgetOf": {
    "scope": "flutter, dart",
    "prefix": "widgetOf",
    "description": "Creates a static `widgetOf` method for a Widget object.",
    "body": [
      "/// The state from the closest instance of this class",
      "/// that encloses the given context, if any.",
      "/// e.g. `${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}State}.maybeOf(context)`.",
      "static ${1}? maybeOf(BuildContext context) =>",
      "  context.findAncestorWidgetOfExactType<${1}>();",
      "",
      "static Never _notFoundStateOfType() =>",
      "  throw ArgumentError(",
      "    'Out of scope, not found widget of type ${1}',",
      "    'out_of_scope',",
      "  );",
      "",
      "/// The state from the closest instance of this class",
      "/// that encloses the given context.",
      "/// e.g. `${1}.of(context)`",
      "static ${1}? of(BuildContext context) =>",
      "  maybeOf(context) ?? _notFoundStateOfType();${0}\n"
    ]
  },
  "Build Method": {
    "scope": "flutter, dart",
    "prefix": "build",
    "description": "Creates a `build` method, describing the part of the UI represented by this widget.",
    "body": [
      "@override",
      "Widget build(BuildContext context) =>",
      "  ${0:const Placeholder()};"
    ]
  },
  "Custom Painter": {
    "scope": "flutter, dart",
    "prefix": [
      "painter",
      "customPainter"
    ],
    "description": "Creates a CustomPainter class for custom drawing.",
    "body": [
      "/// {@template ${2:$TM_FILENAME_BASE}}",
      "/// ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}}Painter.",
      "/// {@endtemplate}",
      "class ${1}Painter extends CustomPainter {",
      "  /// {@macro ${2}}",
      "  const ${1}Painter({super.repaint});",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "    ${0}",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${1}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${1}Painter oldDelegate) => false;",
      "}\n"
    ]
  },
  "Custom Clipper": {
    "scope": "flutter, dart",
    "prefix": [
      "clipper",
      "customClipper"
    ],
    "description": "Creates a CustomClipper class for defining custom clipping shapes.",
    "body": [
      "/// {@template ${2:$TM_FILENAME_BASE}}",
      "/// ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}}Clipper.",
      "/// {@endtemplate}",
      "class ${1}Clipper extends CustomClipper<Path> {",
      "  /// {@macro ${2}}",
      "  const ${1}Clipper({super.reclip});",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "    ${0}",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(${1}Clipper oldClipper) => false;",
      "}\n"
    ]
  },
  "debugFillProperties": {
    "scope": "flutter, dart",
    "prefix": "debugFillProperties",
    "description": "Creates a `debugFillProperties` method for adding debug properties.",
    "body": [
      "@override",
      "void debugFillProperties(DiagnosticPropertiesBuilder properties) =>",
      "  super.debugFillProperties(",
      "    properties",
      "      ..add(",
      "        StringProperty(",
      "          'description',",
      "          'description',",
      "        ),",
      "      ),",
      "  );",
      ""
    ]
  },
  "initState": {
    "scope": "flutter, dart",
    "prefix": "initS",
    "description": "Creates an `initState` method, initializing state when the widget is inserted into the tree.",
    "body": [
      "@override",
      "void initState() {",
      "  super.initState();",
      "  ${0:}",
      "}"
    ]
  },
  "dispose": {
    "scope": "flutter, dart",
    "prefix": "dispose",
    "description": "Creates a `dispose` method, cleaning up resources when the widget is removed from the tree.",
    "body": [
      "@override",
      "void dispose() {",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ]
  },
  "reassemble": {
    "scope": "flutter, dart",
    "prefix": "reassemble",
    "description": "Creates a `reassemble` method, called during hot reload.",
    "body": [
      "@override",
      "void reassemble(){",
      "  super.reassemble();",
      "  ${0:}",
      "}"
    ]
  },
  "didChangeDependencies": {
    "scope": "flutter, dart",
    "prefix": "didChangeD",
    "description": "Creates a `didChangeDependencies` method, called when a dependency of this `State` object changes.",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ]
  },
  "didUpdateWidget": {
    "scope": "flutter, dart",
    "prefix": "didUpdateW",
    "description": "Creates a `didUpdateWidget` method, called when the widget’s configuration changes.",
    "body": [
      "@override",
      "void didUpdateWidget (covariant ${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ]
  },
  "ListView.builder": {
    "scope": "flutter, dart",
    "prefix": "listViewBuilder",
    "description": "Creates a `ListView.builder`, a scrollable list that lazily builds its children as they scroll into view.",
    "body": [
      "ListView.builder(",
      "  itemCount: ${1:1},",
      "  itemBuilder: (context, index) =>",
      "    ${2:const Placeholder()},${0}",
      "),"
    ]
  },
  "ListView.separated": {
    "scope": "flutter, dart",
    "prefix": "listViewSeparated",
    "description": "Creates a `ListView.separated`, a scrollable list with separators between items.",
    "body": [
      "ListView.separated(",
      "  itemCount: ${1:1},",
      "  separatorBuilder: (context, index) {",
      "    return ${2:};",
      "  },",
      "  itemBuilder: (context, index) {",
      "    return ${0:};",
      "  },",
      "),"
    ]
  },
  "GridView.builder": {
    "scope": "flutter, dart",
    "prefix": "gridViewBuilder",
    "description": "Creates a `GridView.builder`, a scrollable grid of widgets that are created on demand.",
    "body": [
      "GridView.builder(",
      "  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "    crossAxisCount: ${1:2},",
      "  ),",
      "  itemCount: ${2:2},",
      "  itemBuilder: (BuildContext context, int index) {",
      "    return ${3:};",
      "  },",
      "),"
    ]
  },
  "GridView.count": {
    "scope": "flutter, dart",
    "prefix": "gridViewCount",
    "description": "Creates a `GridView.count`, a scrollable grid of widgets with a fixed number of tiles in the cross axis.",
    "body": [
      "GridView.count(",
      "  crossAxisSpacing: ${1:1},",
      "  mainAxisSpacing: ${2:2},",
      "  crossAxisCount: ${3:2},",
      "  children: <Widget> [",
      "    ${0:}",
      "  ],",
      "),"
    ]
  },
  "GridView.extent": {
    "scope": "flutter, dart",
    "prefix": "gridViewE",
    "description": "Creates a `GridView.extent`, a scrollable grid of widgets with tiles that each have a maximum cross-axis extent.",
    "body": [
      "GridView.extent(",
      "  maxCrossAxisExtent:  ${1:2},",
      "  children: <Widget> [",
      "    ${0:}",
      "  ],",
      "),"
    ]
  },
  "Custom Scroll View": {
    "scope": "flutter, dart",
    "prefix": "customScrollV",
    "description": "Creates a `CustomScrollView`, a scrollable area that creates custom scroll effects using slivers.",
    "body": [
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "    ${0}",
      "  ],",
      "),"
    ]
  },
  "Builder": {
    "scope": "flutter, dart",
    "prefix": "builder",
    "description": "Creates a `Builder` widget, delegating the widget building process to a callback.",
    "body": [
      "Builder(",
      "  builder: (context)  =>",
      "    ${0:const Placeholder()},",
      "),"
    ]
  },
  "Wrap with Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "wrapWithBuilder"
    ],
    "description": "Wraps a widget with a `Builder` widget.",
    "body": [
      "Builder(",
      "  builder: (context)  =>",
      "    ${TM_SELECTED_TEXT},",
      ")"
    ]
  },
  "Stateful Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "stfBuilder",
      "statefulBuilder"
    ],
    "description": "Creates a `StatefulBuilder` widget, allowing for state management and rebuilding a specific portion of the widget tree.",
    "body": [
      "StatefulBuilder(",
      "  builder: (context, setState) =>",
      "    ${0:const Placeholder()},",
      "),"
    ]
  },
  "Stream Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "strBuilder",
      "streamBuilder"
    ],
    "description": "Creates a `StreamBuilder` widget, rebuilding itself based on the latest snapshot of interaction with a `Stream`.",
    "body": [
      "StreamBuilder<${1:int}>(",
      "  initialData: ${2:initialData},",
      "  stream: ${3:stream},",
      "  builder: (context, snapshot) =>",
      "    ${0:const Placeholder()},",
      "),"
    ]
  },
  "Animated Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "animBuilder",
      "animatedBuilder"
    ],
    "description": "Creates an `AnimatedBuilder` widget, rebuilding itself based on an animation.",
    "body": [
      "AnimatedBuilder(",
      "  animation: ${1:animation},",
      "  builder: (context, child) =>",
      "    ${0:const Placeholder()},",
      "  child: ${2:child},",
      "),"
    ]
  },
  "Listenable Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "lisBuilder",
      "listenableBuilder"
    ],
    "description": "Creates a `ListenableBuilder` widget, rebuilding itself based on the latest value of a `Listenable` it listens to.",
    "body": [
      "ListenableBuilder(",
      "  listenable: ${1: null},",
      "  builder: (context, child) =>",
      "    ${0:const Placeholder()},",
      "  child: ${2:child},",
      "),"
    ]
  },
  "Value Listenable Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "valLisBuilder",
      "valueListenableBuilder"
    ],
    "description": "Creates a `ValueListenableBuilder` widget, rebuilding itself based on the latest value of a `ValueListenable`.",
    "body": [
      "ValueListenableBuilder<${1:int}>(",
      "  valueListenable: ${2: null},",
      "  builder: (context, value, child) =>",
      "    ${0:const Placeholder()},",
      "  child: ${2:child},",
      "),"
    ]
  },
  "Animated Switcher": {
    "scope": "flutter, dart",
    "prefix": [
      "switcher",
      "animatedSwitcher"
    ],
    "description": "Creates an `AnimatedSwitcher` widget, switching between two children and animating the transition.",
    "body": [
      "AnimatedSwitcher(",
      "  duration: const Duration(milliseconds: 350),",
      "  child: cond ? ${1:child} : const SizedBox.shrink(),",
      "),"
    ]
  },
  "Orientation Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "orientBuilder",
      "orientationBuilder"
    ],
    "description": "Creates an `OrientationBuilder` widget, rebuilding itself based on the latest orientation of the device (portrait or landscape).",
    "body": [
      "OrientationBuilder(",
      "  builder: (context, orientation) {",
      "    return ${0:const Placeholder()};",
      "  },",
      "),"
    ]
  },
  "Layout Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "layBuilder",
      "layoutBuilder"
    ],
    "description": "Creates a `LayoutBuilder` widget, rebuilding itself based on the latest layout constraints, useful for responsive layouts.",
    "body": [
      "LayoutBuilder(",
      "  builder: (context, constraints) {",
      "    return ${0:const Placeholder()};",
      "  },",
      "),"
    ]
  },
  "Repaint boundary": {
    "scope": "flutter, dart",
    "prefix": [
      "repBound",
      "repaintBoundary"
    ],
    "description": "Creates a `RepaintBoundary` widget, isolating repaints to improve performance.",
    "body": [
      "RepaintBoundary(",
      "  key: ValueKey<String>(${1:name}),",
      "  child: ${0:const Placeholder()},",
      "),"
    ]
  },
  "Single Child ScrollView": {
    "scope": "flutter, dart",
    "prefix": "singleChildSV",
    "description": "Creates a `SingleChildScrollView` widget, allowing a single child to be scrolled.",
    "body": [
      "SingleChildScrollView(",
      "  controller: ${1:controller,}",
      "  child: Column(",
      "    ${0:}",
      "  ),",
      "),"
    ]
  },
  "Future Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "futBuilder",
      "futureBuilder"
    ],
    "description": "Creates a `FutureBuilder` widget, rebuilding itself based on the latest snapshot of interaction with a `Future`.",
    "body": [
      "FutureBuilder(",
      "  future: ${1:Future},",
      "  initialData: ${2:InitialData},",
      "  builder: (context, snapshot) {",
      "    return ${3:};",
      "  },",
      "),"
    ]
  },
  "Tween Animation Builder": {
    "scope": "flutter, dart",
    "prefix": [
      "tweenAnimBuilder",
      "tweenAnimationBuilder"
    ],
    "description": "Creates a `TweenAnimationBuilder` widget, animating a property of a widget to a target value whenever the target value changes.",
    "body": [
      "TweenAnimationBuilder<${3:Object?}>(",
      "  duration: ${1:const Duration(),}",
      "  tween: ${2:Tween(),}",
      "  builder: (context, value, child) =>",
      "    ${4:const Placeholder()},",
      "),"
    ]
  },
  "Test Widgets": {
    "scope": "flutter, dart",
    "prefix": [
      "testWidget",
      "widgetTest"
    ],
    "description": "Creates a `testWidgets` function for testing a widget.",
    "body": [
      "testWidgets(",
      "  \"${1:test description}\",",
      "  (tester) async {",
      "    ${0}",
      "  },",
      ");"
    ]
  }
}