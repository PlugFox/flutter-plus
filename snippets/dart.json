{
    "Main entry point": {
        "scope": "flutter, dart",
        "prefix": "main",
        "description": "Generates a main function with error handling and zone management for Dart applications.",
        "body": [
            "import 'dart:async';\n",
            "@pragma('vm:entry-point')",
            "void main([List<String>? args]) =>",
            "  runZonedGuarded<void>(() async {",
            "      ${0:// ...}",
            "    },",
            "    (error, stackTrace) => print('\\$error\\n\\$stackTrace'), // ignore: avoid_print",
            "  );\n"
        ]
    },
    "Try-catch-finally block": {
        "scope": "flutter, dart",
        "prefix": "try",
        "description": "Creates a try-catch-finally block, useful for managing exceptions and ensuring cleanup code runs.",
        "body": [
            "try {",
            "  // ...",
            "} on Object catch (error, stackTrace) {",
            "  rethrow; // or Error.throwWithStackTrace(error, stackTrace);",
            "} finally {",
            "  // ...",
            "}"
        ]
    },
    "Timeout handler": {
        "scope": "flutter, dart",
        "prefix": "timeout",
        "description": "Creates a timeout handler for setting execution limits on asynchronous operations.",
        "body": "timeout(const Duration(milliseconds: 5000))${0:;}"
    },
    "Stopwatch": {
        "scope": "flutter, dart",
        "prefix": "stopwatch",
        "description": "Initializes a Stopwatch to measure and log elapsed time for code execution.",
        "body": [
            "final stopwatch = Stopwatch()..start();",
            "try {",
            "  /* ... */",
            "} finally {",
            "  log(",
            "    '${(stopwatch..stop()).elapsedMicroseconds} Î¼s',",
            "    name: 'select',",
            "    level: 100,",
            "  );",
            "}"
        ]
    },
    "Platform conditional imports": {
        "scope": "flutter, dart",
        "prefix": [
            "conditional",
            "conditional_imports",
            "import_conditional"
        ],
        "description": "Generates platform-specific imports based on the environment (VM or JS), ensuring compatibility across different platforms.",
        "body": [
            "import 'stub.dart'",
            "    // ignore: uri_does_not_exist",
            "    if (dart.library.js_interop) 'js.dart'",
            "    // ignore: uri_does_not_exist",
            "    if (dart.library.io) 'io.dart';\n"
        ]
    },
    "Divider": {
        "scope": "flutter, dart",
        "prefix": [
            "dvd",
            "divider_comment"
        ],
        "description": "Inserts a divider comment line, useful for visually separating sections of code.",
        "body": "// --- ${1} --- //\n\n$0"
    },
    "Reverse bypass": {
        "scope": "flutter, dart",
        "prefix": [
            "reverseList"
        ],
        "description": "Generates a loop for traversing a list in reverse order.",
        "body": [
            "for (var i = list.length - 1; i >= 0; i--) $0"
        ]
    },
    "Part": {
        "scope": "flutter, dart",
        "prefix": "part",
        "description": "Adds a part directive to include the specified Dart file as part of the current library.",
        "body": [
            "part '${TM_FILENAME_BASE}.g.dart';$0"
        ]
    },
    "Mocks": {
        "scope": "flutter, dart",
        "prefix": "mocks",
        "description": "Imports a Dart file containing mock implementations for testing purposes.",
        "body": [
            "import '${TM_FILENAME_BASE}.mocks.dart';$0"
        ]
    },
    "Hash Code": {
        "scope": "flutter, dart",
        "prefix": [
            "hashCode",
            "equals",
            "=="
        ],
        "description": "Generates hash code and equals methods, overriding the `==` operator and the `hashCode` getter for custom object comparison.",
        "body": [
            "@override",
            "int get hashCode => id.hashCode;\n",
            "@override",
            "bool operator ==(Object other) =>",
            "    identical(this, other) ||",
            "    other is ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/upcase}${2:/camelcase}/}} &&",
            "        id == other.id;${0}\n"
        ]
    },
    "No Such Method": {
        "scope": "flutter, dart",
        "prefix": [
            "nosm",
            "noSuchMethod"
        ],
        "description": "Implements the `noSuchMethod` method, handling calls to non-existent methods or properties.",
        "body": [
            "@override",
            "dynamic noSuchMethod(Invocation invocation) {",
            "  ${1:}",
            "}"
        ]
    },
    "Test": {
        "scope": "flutter, dart",
        "prefix": [
            "test",
            "unitTest"
        ],
        "description": "Creates a test function, setting up a basic test case using the `test` package.",
        "body": [
            "test('${1:test description}', () {",
            "  ${0:expect(true, isTrue);}",
            "});\n"
        ]
    },
    "Pragma": {
        "scope": "flutter, dart",
        "prefix": [
            "pragma",
            "@pragma"
        ],
        "description": "Inserts a pragma directive to optimize or modify Dart VM/compiler behavior based on the specified options.",
        "body": "@pragma(${1|'vm:entry-point','vm:never-inline','vm:prefer-inline','dart2js:tryInline','vm:notify-debugger-on-exception','vm:invisible','vm:always-consider-inlining','flutter:keep-to-string','flutter:keep-to-string-in-subtypes'|})"
    },
    "Dart doc disable documentation": {
        "scope": "flutter, dart",
        "prefix": [
            "doc-disabled",
            "@doc-disabled"
        ],
        "description": "Adds a comment annotation to disable documentation generation for the specified block of code.",
        "body": []
    },
    "Dart doc category": {
        "scope": "flutter, dart",
        "prefix": [
            "doc-category",
            "@doc-category"
        ],
        "description": "Categorizes a block of documentation with the specified category or subcategory tags.",
        "body": [
            "/// {@${1|category,subCategory|} ${0}}"
        ]
    },
    "Dart doc image": {
        "scope": "flutter, dart",
        "prefix": [
            "doc-image",
            "@doc-image"
        ],
        "description": "Embeds an image within a block of documentation, using the specified URL as the source.",
        "body": [
            "/// {@image <image alt='' src='${0:https://host.tld/path/to/image.png}'>}"
        ]
    },
    "Dart doc animation": {
        "scope": "flutter, dart",
        "prefix": [
            "doc-animation",
            "@doc-animation"
        ],
        "description": "Embeds an animation within a block of documentation, with options for specifying the size and source URL.",
        "body": "/// {@animation name 100 200 ${0:https://host.tld/path/to/video.mp4}}"
    },
    "Dart doc new template": {
        "scope": "flutter, dart",
        "prefix": [
            "newtmpl",
            "@template",
            "template",
            "doc-new-template",
            "doc-new-macro",
            "@doc-template"
        ],
        "description": "Creates a new Dart documentation template with the current file's name as the prefix, useful for reusing content across multiple documentation blocks.",
        "body": [
            "/// {@template ${1:$TM_FILENAME_BASE}}",
            "/// ${0:Body of the template}",
            "/// {@endtemplate}"
        ]
    },
    "Dart doc use macro": {
        "scope": "flutter, dart",
        "prefix": [
            "usetmpl",
            "@macro",
            "macro",
            "doc-use-template",
            "doc-use-macro",
            "@doc-macro"
        ],
        "description": "Inserts an existing Dart documentation macro, using the current file's name as the prefix, to maintain consistency in documentation.",
        "body": "/// {@macro ${0:$TM_FILENAME_BASE}}"
    },
    "Dart doc inject html": {
        "scope": "flutter, dart",
        "prefix": [
            "doc-html",
            "@inject-html",
            "inject-html",
            "@doc-html"
        ],
        "description": "Injects custom HTML into a documentation comment, allowing for rich formatting or content inclusion.",
        "body": [
            "/// {@inject-html}",
            "/// ${0:<p>[The HTML to inject.]()</p>}",
            "/// {@end-inject-html}"
        ]
    },
    "Deprecated": {
        "scope": "flutter, dart",
        "prefix": [
            "deprecated",
            "@deprecated"
        ],
        "description": "Marks a class, method, or property as deprecated, indicating that it should no longer be used and may be removed in future versions.",
        "body": "@Deprecated('${0:Reason}')"
    },
    "Meta": {
        "scope": "flutter, dart",
        "prefix": [
            "meta",
            "@meta",
            "@annotation",
            "annotation"
        ],
        "description": "Applies a meta annotation to a class, method, or property, providing additional metadata for tooling or code analysis purposes.",
        "body": "@${1|immutable,useResult,internal,protected,literal,mustCallSuper,sealed,alwaysThrows,factory,visibleForOverriding,visibleForTesting,experimental,nonVirtual,doNotStore,optionalTypeArgs|}"
    },
    "Coverage": {
        "scope": "flutter, dart",
        "prefix": [
            "coverage"
        ],
        "description": "Adds a coverage annotation to mark lines or blocks of code that should be ignored by test coverage tools.",
        "body": "// coverage:${1|ignore-line,ignore-start,ignore-end,ignore-file|}"
    }
}